# -*- coding: utf-8 -*-
"""DistanceFiltered_catchmentLevel_RunoffRatioAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YiB5xTVMxp7NNTF4PFoxfj1YOBjeX7E9
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

#!pip install geemap &> install.log

#!pip install geopandas

root = "/home/sethbw/Documents/brian_flow_code/Data/spectralFiles"
outRoot = "/home/sethbw/Documents/brian_flow_code/Data/spectralFiles/figures/rr/catchment"


#import ee
import json
import datetime
import pandas as pd
import os
import math
import time
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

def confidence_interval(df, confidence=0.9):
  df_size = len(df)
  df_conf = int(df_size*confidence)
  sorted_df = df.sort_values(["data"], ascending=False,ignore_index=True)
  tails = df_size - df_conf
  tail_1 = None
  tail_2 = None
  if tails%2 == 1:
    tail_1 = -(tails // -2) # ceiling division
    tail_2 = tails // 2 # floor division
  else:
    tail_1 = tails / 2
    tail_2 = tails / 2
  tail_2 = df_size - tail_2
  
  tail_1 = int(tail_1)
  tail_2 = int(tail_2) - 1
  left_bound = sorted_df['data'].iloc[tail_1]
  right_bound = sorted_df['data'].iloc[tail_2]
  return (left_bound, right_bound)

control_path = os.path.join(root, 'runoffRatio_measured_effectgs.csv')
real_path = os.path.join(root, "runoff_ratio_real_burn_effects_catchments.csv")
master_burn_data_path = os.path.join(root, 'master_burn_data.csv')

master_burn_data_df = pd.read_csv(master_burn_data_path)
control_df = pd.read_csv(control_path)
real_df = pd.read_csv(real_path)

control_df

real_df

master_burn_data_df = master_burn_data_df.loc[:,['catchment','burned','distance_to_nearest_burn']]
master_burn_data_df
# master_burn_data_df_lt200 = master_burn_data_df[master_burn_data_df.distance_to_nearest_burn < 200]
# master_burn_data_df_list = master_burn_data_df_lt200['distance_to_nearest_burn'].values.tolist()

# master_burn_data_df_lt200

catchments = master_burn_data_df['catchment'].values.tolist()
new_catchs = []
# Removing the 'X' from the start of the catchment string
for catch in catchments:
  temp_catch = catch[1:15]
  new_catchs.append(temp_catch)

master_burn_data_df = master_burn_data_df.loc[:,['burned','distance_to_nearest_burn']]
master_burn_data_df['catchment'] = new_catchs
master_burn_data_df

catchments = control_df['catchment'].values.tolist()
new_catchs = []
new_catchs_insts = []
# Removing the 'X0' from the start of the catchment string
for catch in catchments:
  temp_catch = catch[1:9]
  temp_catch_insts = catch[10:]
  new_catchs_insts.append(temp_catch_insts)
  new_catchs.append(temp_catch)

control_df = control_df.loc[:,['numPreYears','postYear','preMean','postMean','postMinusPre','postMinusPrePercent']]
control_df['catchment'] = new_catchs
control_df['catchment instance'] = new_catchs_insts
control_df

catchments = real_df['catchment'].values.tolist()
new_catchs = []
# Removing the 'X0' from the start of the catchment string
for catch in catchments:
  temp_catch = catch[1:15]
  new_catchs.append(temp_catch)

real_df = real_df.loc[:,['numPreYears','postYear','preMean','postMean','postMinusPre','postMinusPrePercent', 'percent_burned']]
real_df['catchment'] = new_catchs

control_df = control_df.set_index('catchment').join(master_burn_data_df.set_index('catchment'))
control_df_lt200 = control_df[control_df.distance_to_nearest_burn < 200]
control_df_lt100 = control_df[control_df.distance_to_nearest_burn < 100]


control_df_lt200 = control_df_lt200.loc[:,['postYear', 'postMinusPrePercent','catchment instance','distance_to_nearest_burn']]
lt200_control_post_yr1 = control_df_lt200.loc[control_df_lt200.postYear == 1]
lt200_control_post_yr2 = control_df_lt200.loc[control_df_lt200.postYear == 2]
lt200_control_post_yr3 = control_df_lt200.loc[control_df_lt200.postYear == 3]
lt200_control_post_yr4 = control_df_lt200.loc[control_df_lt200.postYear == 4]
lt200_control_post_yr5 = control_df_lt200.loc[control_df_lt200.postYear == 5]
lt200_control_post_yr6 = control_df_lt200.loc[control_df_lt200.postYear == 6]
lt200_control_post_yr7 = control_df_lt200.loc[control_df_lt200.postYear == 7]
lt200_control_post_yr8 = control_df_lt200.loc[control_df_lt200.postYear == 8]
lt200_control_post_yr9 = control_df_lt200.loc[control_df_lt200.postYear == 9]
lt200_control_post_yr10 = control_df_lt200.loc[control_df_lt200.postYear == 10]

control_df_lt100 = control_df_lt100.loc[:,['postYear', 'postMinusPrePercent','catchment instance','distance_to_nearest_burn']]
lt100_control_post_yr1 = control_df_lt100.loc[control_df_lt100.postYear == 1]
lt100_control_post_yr2 = control_df_lt100.loc[control_df_lt100.postYear == 2]
lt100_control_post_yr3 = control_df_lt100.loc[control_df_lt100.postYear == 3]
lt100_control_post_yr4 = control_df_lt100.loc[control_df_lt100.postYear == 4]
lt100_control_post_yr5 = control_df_lt100.loc[control_df_lt100.postYear == 5]
lt100_control_post_yr6 = control_df_lt100.loc[control_df_lt100.postYear == 6]
lt100_control_post_yr7 = control_df_lt100.loc[control_df_lt100.postYear == 7]
lt100_control_post_yr8 = control_df_lt100.loc[control_df_lt100.postYear == 8]
lt100_control_post_yr9 = control_df_lt100.loc[control_df_lt100.postYear == 9]
lt100_control_post_yr10 = control_df_lt100.loc[control_df_lt100.postYear == 10]

real_df = real_df.loc[:,['postYear', 'postMinusPrePercent','percent_burned']]
real_post_yr_1 = real_df.loc[real_df.postYear == 1]
real_post_yr_2 = real_df.loc[real_df.postYear == 2]
real_post_yr_3 = real_df.loc[real_df.postYear == 3]
real_post_yr_4 = real_df.loc[real_df.postYear == 4]
real_post_yr_5 = real_df.loc[real_df.postYear == 5]
real_post_yr_6 = real_df.loc[real_df.postYear == 6]
real_post_yr_7 = real_df.loc[real_df.postYear == 7]
real_post_yr_8 = real_df.loc[real_df.postYear == 8]
real_post_yr_9 = real_df.loc[real_df.postYear == 9]
real_post_yr_10 = real_df.loc[real_df.postYear == 10]

"""##Year 1"""

lt200_control_yr1_list = lt200_control_post_yr1['postMinusPrePercent'].values.tolist()
lt_200_control_yr1_arr = np.array(lt200_control_yr1_list)
lt200_control_z_scores_yr1 = stats.zscore(lt_200_control_yr1_arr,ddof=0)
d = {'data':lt_200_control_yr1_arr, 'z_score':lt200_control_z_scores_yr1}
lt200_control_yr1_df = pd.DataFrame(d)
lt200_control_yr1_df['outlier'] = (abs(lt200_control_yr1_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr1_df[lt200_control_yr1_df.outlier == 0]
lt200_control_yr1_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr1_no_outliers_mean = np.mean(lt200_control_yr1_no_outliers_arr)
lt200_control_yr1_with_outliers_mean = np.mean(lt200_control_z_scores_yr1)
lt200_control_yr1_confidence_int_90 = confidence_interval(lt200_control_yr1_df,confidence=.9)
lt200_control_yr1_confidence_int_95 = confidence_interval(lt200_control_yr1_df,confidence=.95)
lt200_control_yr1_confidence_int_97_5 = confidence_interval(lt200_control_yr1_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr1_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr1_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr1_confidence_int_97_5)
print('lt200_control_yr1_no_outliers_mean: ', lt200_control_yr1_no_outliers_mean)
print('lt200_control_yr1_with_outliers_mean: ', np.mean(lt200_control_z_scores_yr1))

real_yr1_list = real_post_yr_1['postMinusPrePercent'].values.tolist()
real_yr1_arr = np.array(real_yr1_list)
real_z_scores = stats.zscore(real_yr1_arr,ddof=0)
d = {'data':real_yr1_arr, 'z_score':real_z_scores}
real_yr1_df = pd.DataFrame(d)
real_yr1_df['outlier'] = (abs(real_yr1_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr1_df[real_yr1_df.outlier == 0]
real_yr1_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr1_no_outliers_mean = np.mean(real_yr1_no_outliers_arr)
real_yr1_with_outliers_mean = np.mean(real_yr1_arr)
real_yr1_confidence_int_90 = confidence_interval(real_yr1_df,confidence=.9)
real_yr1_confidence_int_95 = confidence_interval(real_yr1_df,confidence=.95)
real_yr1_confidence_int_97_5 = confidence_interval(real_yr1_df,confidence=.975)
print('90% confidence interval: ', real_yr1_confidence_int_90)
print('95% confidence interval: ', real_yr1_confidence_int_95)
print('97.5% confidence interval: ', real_yr1_confidence_int_97_5)
print('real_yr1_no_outliers_mean: ', real_yr1_no_outliers_mean)
print('real_yr1_with_outliers_mean: ', np.mean(real_yr1_arr))

"""##Year 2"""

lt200_control_yr2_list = lt200_control_post_yr2['postMinusPrePercent'].values.tolist()
lt_200_control_yr2_arr = np.array(lt200_control_yr2_list)
lt200_control_z_scores_yr2 = stats.zscore(lt_200_control_yr2_arr,ddof=0)
d = {'data':lt_200_control_yr2_arr, 'z_score':lt200_control_z_scores_yr2}
lt200_control_yr2_df = pd.DataFrame(d)
lt200_control_yr2_df['outlier'] = (abs(lt200_control_yr2_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr2_df[lt200_control_yr2_df.outlier == 0]
lt200_control_yr2_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr2_no_outliers_mean = np.mean(lt200_control_yr2_no_outliers_arr)
lt200_control_yr2_with_outliers_mean = np.mean(lt200_control_z_scores_yr2)
lt200_control_yr2_confidence_int_90 = confidence_interval(lt200_control_yr2_df,confidence=.9)
lt200_control_yr2_confidence_int_95 = confidence_interval(lt200_control_yr2_df,confidence=.95)
lt200_control_yr2_confidence_int_97_5 = confidence_interval(lt200_control_yr2_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr2_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr2_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr2_confidence_int_97_5)
print('lt200_control_yr2_no_outliers_mean: ', lt200_control_yr2_no_outliers_mean)
print('lt200_control_yr2_with_outliers_mean: ', np.mean(lt200_control_z_scores_yr2))

real_yr2_list = real_post_yr_2['postMinusPrePercent'].values.tolist()
real_yr2_arr = np.array(real_yr2_list)
real_z_scores = stats.zscore(real_yr2_arr,ddof=0)
d = {'data':real_yr2_arr, 'z_score':real_z_scores}
real_yr2_df = pd.DataFrame(d)
real_yr2_df['outlier'] = (abs(real_yr2_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr2_df[real_yr2_df.outlier == 0]
real_yr2_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr2_no_outliers_mean = np.mean(real_yr2_no_outliers_arr)
real_yr2_with_outliers_mean = np.mean(real_yr2_arr)
real_yr2_confidence_int_90 = confidence_interval(real_yr2_df,confidence=.9)
real_yr2_confidence_int_95 = confidence_interval(real_yr2_df,confidence=.95)
real_yr2_confidence_int_97_5 = confidence_interval(real_yr2_df,confidence=.975)
print('90% confidence interval: ', real_yr2_confidence_int_90)
print('95% confidence interval: ', real_yr2_confidence_int_95)
print('97.5% confidence interval: ', real_yr2_confidence_int_97_5)
print('real_yr2_no_outliers_mean: ', real_yr2_no_outliers_mean)
print('real_yr2_with_outliers_mean: ', np.mean(real_yr2_arr))

"""##Year 3"""

lt200_control_yr3_list = lt200_control_post_yr3['postMinusPrePercent'].values.tolist()
lt_200_control_yr3_arr = np.array(lt200_control_yr3_list)
lt200_control_z_scores_yr3 = stats.zscore(lt_200_control_yr3_arr,ddof=0)
d = {'data':lt_200_control_yr3_arr, 'z_score':lt200_control_z_scores_yr3}
lt200_control_yr3_df = pd.DataFrame(d)
lt200_control_yr3_df['outlier'] = (abs(lt200_control_yr3_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr3_df[lt200_control_yr3_df.outlier == 0]
lt200_control_yr3_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr3_no_outliers_mean = np.mean(lt200_control_yr3_no_outliers_arr)
lt200_control_yr3_with_outliers_mean = np.mean(lt200_control_z_scores_yr3)
lt200_control_yr3_confidence_int_90 = confidence_interval(lt200_control_yr3_df,confidence=.9)
lt200_control_yr3_confidence_int_95 = confidence_interval(lt200_control_yr3_df,confidence=.95)
lt200_control_yr3_confidence_int_97_5 = confidence_interval(lt200_control_yr3_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr3_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr3_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr3_confidence_int_97_5)
print('lt200_control_yr3_no_outliers_mean: ', lt200_control_yr3_no_outliers_mean)
print('lt200_control_yr3_with_outliers_mean: ', np.mean(lt200_control_z_scores_yr3))

real_yr3_list = real_post_yr_3['postMinusPrePercent'].values.tolist()
real_yr3_arr = np.array(real_yr3_list)
real_z_scores = stats.zscore(real_yr3_arr,ddof=0)
d = {'data':real_yr3_arr, 'z_score':real_z_scores}
real_yr3_df = pd.DataFrame(d)
real_yr3_df['outlier'] = (abs(real_yr3_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr3_df[real_yr3_df.outlier == 0]
real_yr3_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr3_no_outliers_mean = np.mean(real_yr3_no_outliers_arr)
real_yr3_with_outliers_mean = np.mean(real_yr3_arr)
real_yr3_confidence_int_90 = confidence_interval(real_yr3_df,confidence=.9)
real_yr3_confidence_int_95 = confidence_interval(real_yr3_df,confidence=.95)
real_yr3_confidence_int_97_5 = confidence_interval(real_yr3_df,confidence=.975)
print('90% confidence interval: ', real_yr3_confidence_int_90)
print('95% confidence interval: ', real_yr3_confidence_int_95)
print('97.5% confidence interval: ', real_yr3_confidence_int_97_5)
print('real_yr3_no_outliers_mean: ', real_yr3_no_outliers_mean)
print('real_yr3_with_outliers_mean: ', np.mean(real_yr3_arr))

"""##Year 4"""

lt200_control_yr4_list = lt200_control_post_yr4['postMinusPrePercent'].values.tolist()
lt_200_control_yr4_arr = np.array(lt200_control_yr4_list)
lt200_control_z_scores = stats.zscore(lt_200_control_yr4_arr,ddof=0)
d = {'data':lt_200_control_yr4_arr, 'z_score':lt200_control_z_scores}
lt200_control_yr4_df = pd.DataFrame(d)
lt200_control_yr4_df['outlier'] = (abs(lt200_control_yr4_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr4_df[lt200_control_yr4_df.outlier == 0]
lt200_control_yr4_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr4_no_outliers_mean = np.mean(lt200_control_yr4_no_outliers_arr)
lt200_control_yr4_with_outliers_mean = np.mean(lt200_control_z_scores)
lt200_control_yr4_confidence_int_90 = confidence_interval(lt200_control_yr4_df,confidence=.9)
lt200_control_yr4_confidence_int_95 = confidence_interval(lt200_control_yr4_df,confidence=.95)
lt200_control_yr4_confidence_int_97_5 = confidence_interval(lt200_control_yr4_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr4_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr4_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr4_confidence_int_97_5)
print('lt200_control_yr4_no_outliers_mean: ', lt200_control_yr4_no_outliers_mean)
print('lt200_control_yr4_with_outliers_mean: ', np.mean(lt200_control_z_scores))

real_yr4_list = real_post_yr_4['postMinusPrePercent'].values.tolist()
real_yr4_arr = np.array(real_yr4_list)
real_z_scores = stats.zscore(real_yr4_arr,ddof=0)
d = {'data':real_yr4_arr, 'z_score':real_z_scores}
real_yr4_df = pd.DataFrame(d)
real_yr4_df['outlier'] = (abs(real_yr4_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr4_df[real_yr4_df.outlier == 0]
real_yr4_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr4_no_outliers_mean = np.mean(real_yr4_no_outliers_arr)
real_yr4_with_outliers_mean = np.mean(real_yr4_arr)
real_yr4_confidence_int_90 = confidence_interval(real_yr4_df,confidence=.9)
real_yr4_confidence_int_95 = confidence_interval(real_yr4_df,confidence=.95)
real_yr4_confidence_int_97_5 = confidence_interval(real_yr4_df,confidence=.975)
print('90% confidence interval: ', real_yr4_confidence_int_90)
print('95% confidence interval: ', real_yr4_confidence_int_95)
print('97.5% confidence interval: ', real_yr4_confidence_int_97_5)
print('real_yr4_no_outliers_mean: ', real_yr4_no_outliers_mean)
print('real_yr4_with_outliers_mean: ', np.mean(real_yr4_arr))

"""##Year 5"""

lt200_control_yr5_list = lt200_control_post_yr5['postMinusPrePercent'].values.tolist()
lt_200_control_yr5_arr = np.array(lt200_control_yr5_list)
lt200_control_z_scores = stats.zscore(lt_200_control_yr5_arr,ddof=0)
d = {'data':lt_200_control_yr5_arr, 'z_score':lt200_control_z_scores}
lt200_control_yr5_df = pd.DataFrame(d)
lt200_control_yr5_df['outlier'] = (abs(lt200_control_yr5_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr5_df[lt200_control_yr5_df.outlier == 0]
lt200_control_yr5_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr5_no_outliers_mean = np.mean(lt200_control_yr5_no_outliers_arr)
lt200_control_yr5_with_outliers_mean = np.mean(lt200_control_z_scores)
lt200_control_yr5_confidence_int_90 = confidence_interval(lt200_control_yr5_df,confidence=.9)
lt200_control_yr5_confidence_int_95 = confidence_interval(lt200_control_yr5_df,confidence=.95)
lt200_control_yr5_confidence_int_97_5 = confidence_interval(lt200_control_yr5_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr5_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr5_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr5_confidence_int_97_5)
print('lt200_control_yr5_no_outliers_mean: ', lt200_control_yr5_no_outliers_mean)
print('lt200_control_yr5_with_outliers_mean: ', np.mean(lt200_control_z_scores))

real_yr5_list = real_post_yr_5['postMinusPrePercent'].values.tolist()
real_yr5_arr = np.array(real_yr5_list)
real_z_scores = stats.zscore(real_yr5_arr,ddof=0)
d = {'data':real_yr5_arr, 'z_score':real_z_scores}
real_yr5_df = pd.DataFrame(d)
real_yr5_df['outlier'] = (abs(real_yr5_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr5_df[real_yr5_df.outlier == 0]
real_yr5_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr5_no_outliers_mean = np.mean(real_yr5_no_outliers_arr)
real_yr5_with_outliers_mean = np.mean(real_yr5_arr)
real_yr5_confidence_int_90 = confidence_interval(real_yr5_df,confidence=.9)
real_yr5_confidence_int_95 = confidence_interval(real_yr5_df,confidence=.95)
real_yr5_confidence_int_97_5 = confidence_interval(real_yr5_df,confidence=.975)
print('90% confidence interval: ', real_yr5_confidence_int_90)
print('95% confidence interval: ', real_yr5_confidence_int_95)
print('97.5% confidence interval: ', real_yr5_confidence_int_97_5)
print('real_yr5_no_outliers_mean: ', real_yr5_no_outliers_mean)
print('real_yr5_with_outliers_mean: ', np.mean(real_yr5_arr))

"""##Year 6"""

lt200_control_yr6_list = lt200_control_post_yr6['postMinusPrePercent'].values.tolist()
lt_200_control_yr6_arr = np.array(lt200_control_yr6_list)
lt200_control_z_scores = stats.zscore(lt_200_control_yr6_arr,ddof=0)
d = {'data':lt_200_control_yr6_arr, 'z_score':lt200_control_z_scores}
lt200_control_yr6_df = pd.DataFrame(d)
lt200_control_yr6_df['outlier'] = (abs(lt200_control_yr6_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr6_df[lt200_control_yr6_df.outlier == 0]
lt200_control_yr6_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr6_no_outliers_mean = np.mean(lt200_control_yr6_no_outliers_arr)
lt200_control_yr6_with_outliers_mean = np.mean(lt200_control_z_scores)
lt200_control_yr6_confidence_int_90 = confidence_interval(lt200_control_yr6_df,confidence=.9)
lt200_control_yr6_confidence_int_95 = confidence_interval(lt200_control_yr6_df,confidence=.95)
lt200_control_yr6_confidence_int_97_5 = confidence_interval(lt200_control_yr6_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr6_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr6_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr6_confidence_int_97_5)
print('lt200_control_yr6_no_outliers_mean: ', lt200_control_yr6_no_outliers_mean)
print('lt200_control_yr6_with_outliers_mean: ', np.mean(lt200_control_z_scores))

real_yr6_list = real_post_yr_6['postMinusPrePercent'].values.tolist()
real_yr6_arr = np.array(real_yr6_list)
real_z_scores = stats.zscore(real_yr6_arr,ddof=0)
d = {'data':real_yr6_arr, 'z_score':real_z_scores}
real_yr6_df = pd.DataFrame(d)
real_yr6_df['outlier'] = (abs(real_yr6_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr6_df[real_yr6_df.outlier == 0]
real_yr6_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr6_no_outliers_mean = np.mean(real_yr6_no_outliers_arr)
real_yr6_with_outliers_mean = np.mean(real_yr6_arr)
real_yr6_confidence_int_90 = confidence_interval(real_yr6_df,confidence=.9)
real_yr6_confidence_int_95 = confidence_interval(real_yr6_df,confidence=.95)
real_yr6_confidence_int_97_5 = confidence_interval(real_yr6_df,confidence=.975)
print('90% confidence interval: ', real_yr6_confidence_int_90)
print('96% confidence interval: ', real_yr6_confidence_int_95)
print('97.6% confidence interval: ', real_yr6_confidence_int_97_5)
print('real_yr6_no_outliers_mean: ', real_yr6_no_outliers_mean)
print('real_yr6_with_outliers_mean: ', np.mean(real_yr6_arr))

"""##Year 7"""

lt200_control_yr7_list = lt200_control_post_yr7['postMinusPrePercent'].values.tolist()
lt_200_control_yr7_arr = np.array(lt200_control_yr7_list)
lt200_control_z_scores = stats.zscore(lt_200_control_yr7_arr,ddof=0)
d = {'data':lt_200_control_yr7_arr, 'z_score':lt200_control_z_scores}
lt200_control_yr7_df = pd.DataFrame(d)
lt200_control_yr7_df['outlier'] = (abs(lt200_control_yr7_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr7_df[lt200_control_yr7_df.outlier == 0]
lt200_control_yr7_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr7_no_outliers_mean = np.mean(lt200_control_yr7_no_outliers_arr)
lt200_control_yr7_with_outliers_mean = np.mean(lt200_control_z_scores)
lt200_control_yr7_confidence_int_90 = confidence_interval(lt200_control_yr7_df,confidence=.9)
lt200_control_yr7_confidence_int_95 = confidence_interval(lt200_control_yr7_df,confidence=.95)
lt200_control_yr7_confidence_int_97_5 = confidence_interval(lt200_control_yr7_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr7_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr7_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr7_confidence_int_97_5)
print('lt200_control_yr7_no_outliers_mean: ', lt200_control_yr7_no_outliers_mean)
print('lt200_control_yr7_with_outliers_mean: ', np.mean(lt200_control_z_scores))

real_yr7_list = real_post_yr_7['postMinusPrePercent'].values.tolist()
real_yr7_arr = np.array(real_yr7_list)
real_z_scores = stats.zscore(real_yr7_arr,ddof=0)
d = {'data':real_yr7_arr, 'z_score':real_z_scores}
real_yr7_df = pd.DataFrame(d)
real_yr7_df['outlier'] = (abs(real_yr7_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr7_df[real_yr7_df.outlier == 0]
real_yr7_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr7_no_outliers_mean = np.mean(real_yr7_no_outliers_arr)
real_yr7_with_outliers_mean = np.mean(real_yr7_arr)
real_yr7_confidence_int_90 = confidence_interval(real_yr7_df,confidence=.9)
real_yr7_confidence_int_95 = confidence_interval(real_yr7_df,confidence=.95)
real_yr7_confidence_int_97_5 = confidence_interval(real_yr7_df,confidence=.975)
print('90% confidence interval: ', real_yr7_confidence_int_90)
print('97% confidence interval: ', real_yr7_confidence_int_95)
print('97.7% confidence interval: ', real_yr7_confidence_int_97_5)
print('real_yr7_no_outliers_mean: ', real_yr7_no_outliers_mean)
print('real_yr7_with_outliers_mean: ', np.mean(real_yr7_arr))

"""#Year 8"""

lt200_control_yr8_list = lt200_control_post_yr8['postMinusPrePercent'].values.tolist()
lt_200_control_yr8_arr = np.array(lt200_control_yr8_list)
lt200_control_z_scores = stats.zscore(lt_200_control_yr8_arr,ddof=0)
d = {'data':lt_200_control_yr8_arr, 'z_score':lt200_control_z_scores}
lt200_control_yr8_df = pd.DataFrame(d)
lt200_control_yr8_df['outlier'] = (abs(lt200_control_yr8_df['z_score'])>3).astype(int)
lt200_control_no_outliers_df = lt200_control_yr8_df[lt200_control_yr8_df.outlier == 0]
lt200_control_yr8_no_outliers_arr = lt200_control_no_outliers_df['data'].to_numpy()
lt200_control_yr8_no_outliers_mean = np.mean(lt200_control_yr8_no_outliers_arr)
lt200_control_yr8_with_outliers_mean = np.mean(lt200_control_z_scores)
lt200_control_yr8_confidence_int_90 = confidence_interval(lt200_control_yr8_df,confidence=.9)
lt200_control_yr8_confidence_int_95 = confidence_interval(lt200_control_yr8_df,confidence=.95)
lt200_control_yr8_confidence_int_97_5 = confidence_interval(lt200_control_yr8_df,confidence=.975)
print('90% confidence interval: ', lt200_control_yr8_confidence_int_90)
print('95% confidence interval: ', lt200_control_yr8_confidence_int_95)
print('97.5% confidence interval: ', lt200_control_yr8_confidence_int_97_5)
print('lt200_control_yr8_no_outliers_mean: ', lt200_control_yr8_no_outliers_mean)
print('lt200_control_yr8_with_outliers_mean: ', np.mean(lt200_control_z_scores))

real_yr8_list = real_post_yr_8['postMinusPrePercent'].values.tolist()
real_yr8_arr = np.array(real_yr8_list)
real_z_scores = stats.zscore(real_yr8_arr,ddof=0)
d = {'data':real_yr8_arr, 'z_score':real_z_scores}
real_yr8_df = pd.DataFrame(d)
real_yr8_df['outlier'] = (abs(real_yr8_df['z_score'])>3).astype(int)
real_no_outliers_df = real_yr8_df[real_yr8_df.outlier == 0]
real_yr8_no_outliers_arr = real_no_outliers_df['data'].to_numpy()
real_yr8_no_outliers_mean = np.mean(real_yr8_no_outliers_arr)
real_yr8_with_outliers_mean = np.mean(real_yr8_arr)
real_yr8_confidence_int_90 = confidence_interval(real_yr8_df,confidence=.9)
real_yr8_confidence_int_95 = confidence_interval(real_yr8_df,confidence=.95)
real_yr8_confidence_int_97_5 = confidence_interval(real_yr8_df,confidence=.975)
print('90% confidence interval: ', real_yr8_confidence_int_90)
print('95% confidence interval: ', real_yr8_confidence_int_95)
print('97.5% confidence interval: ', real_yr8_confidence_int_97_5)
print('real_yr8_no_outliers_mean: ', real_yr8_no_outliers_mean)
print('real_yr8_with_outliers_mean: ', np.mean(real_yr8_arr))

"""##Histograms"""

RR_bins = list(range(-1000,1000,20))
RR_bins = np.array(RR_bins)
RR_bins = RR_bins 
print(RR_bins)

"""# Year 1"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr1_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr1_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

fig.tight_layout()
#fig.legend(loc=0)
plt.title('RRA: 1 Year After Burn')
plt.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr1.png"))
plt.show()

"""# Year 2"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr2_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr2_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 2 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr2.png"))
plt.show()

"""# Year 3"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr3_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr3_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 3 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr3.png"))
plt.show()

"""#Year 4"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr4_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr4_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 4 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr4.png"))
plt.show()

"""#Year 5"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr5_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr5_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 5 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr5.png"))
plt.show()

"""#Year 6"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr6_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr6_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 6 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr6.png"))
plt.show()

"""#Year 7"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr7_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr7_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 7 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr7.png"))
plt.show()

"""#Year 8"""

fig, ax1 = plt.subplots()
ax1.set_xlabel('Percent Change')
ax1.set_ylabel('Unburned Catchment Count')
ax1.hist(lt_200_control_yr8_arr*100, bins=RR_bins, stacked=True, color='blue',label='Unburned Catchments')

ax2 = ax1.twinx()
ax2.set_ylabel('Burned Catchment Count')
ax2.hist(real_yr8_arr*100, bins=RR_bins, stacked=True, color='orange',alpha=0.6, label='Burned Catchments')

#fig.legend(loc=0)
plt.title('RRA: 8 Year After Burn')
fig.tight_layout()
plt.savefig(os.path.join(outRoot, "rr_catchment_yr8.png"))
plt.show()

"""# Exporting Statistics Tables"""

# control_means_no_outliers = [control_yr1_no_outliers_mean, control_yr2_no_outliers_mean, control_yr3_no_outliers_mean, control_yr4_no_outliers_mean, control_yr5_no_outliers_mean, control_yr6_no_outliers_mean, control_yr7_no_outliers_mean, control_yr8_no_outliers_mean]
# control_means_yes_outliers = [control_yr1_with_outliers_mean, control_yr2_with_outliers_mean, control_yr3_with_outliers_mean, control_yr4_with_outliers_mean, control_yr5_with_outliers_mean, control_yr6_with_outliers_mean, control_yr7_with_outliers_mean, control_yr8_with_outliers_mean]
# control_90percent_confidence = [control_yr1_confidence_int_90, control_yr2_confidence_int_90, control_yr3_confidence_int_90, control_yr4_confidence_int_90, control_yr5_confidence_int_90, control_yr6_confidence_int_90, control_yr7_confidence_int_90, control_yr8_confidence_int_90]
# control_95percent_confidence = [control_yr1_confidence_int_95, control_yr2_confidence_int_95, control_yr3_confidence_int_95, control_yr4_confidence_int_95, control_yr5_confidence_int_95, control_yr6_confidence_int_95, control_yr7_confidence_int_95, control_yr8_confidence_int_95]
# control_97_5_percent_confidence = [control_yr1_confidence_int_97_5, control_yr2_confidence_int_97_5, control_yr3_confidence_int_97_5, control_yr4_confidence_int_97_5, control_yr5_confidence_int_97_5, control_yr6_confidence_int_97_5, control_yr7_confidence_int_97_5, control_yr8_confidence_int_97_5]
# control_d = {'post year':[1,2,3,4,5,6,7,8], 
#               'means no outliers':control_means_no_outliers, 
#               'means with outliers': control_means_yes_outliers, 
#               '90 percent confidence interval': control_90percent_confidence, 
#               '95 percent confidence interval': control_95percent_confidence, 
#               '97.5 percent confidence interval': control_97_5_percent_confidence}
# control_df = pd.DataFrame(control_d)
# control_df.to_csv(path_or_buf='/content/drive/MyDrive/IDeA Lab/Burned Catchment Hydrology/runoff_ratio_analysis/rra_catch-level_empDist_control_table.csv',index=False)

# real_means_no_outliers = [real_yr1_no_outliers_mean, real_yr2_no_outliers_mean, real_yr3_no_outliers_mean, real_yr4_no_outliers_mean, real_yr5_no_outliers_mean, real_yr6_no_outliers_mean, real_yr7_no_outliers_mean, real_yr8_no_outliers_mean]
# real_means_yes_outliers = [real_yr1_with_outliers_mean, real_yr2_with_outliers_mean, real_yr3_with_outliers_mean, real_yr4_with_outliers_mean, real_yr5_with_outliers_mean, real_yr6_with_outliers_mean, real_yr7_with_outliers_mean, real_yr8_with_outliers_mean]
# real_90percent_confidence = [real_yr1_confidence_int_90, real_yr2_confidence_int_90, real_yr3_confidence_int_90, real_yr4_confidence_int_90, real_yr5_confidence_int_90, real_yr6_confidence_int_90, real_yr7_confidence_int_90, real_yr8_confidence_int_90]
# real_95percent_confidence = [real_yr1_confidence_int_95, real_yr2_confidence_int_95, real_yr3_confidence_int_95, real_yr4_confidence_int_95, real_yr5_confidence_int_95, real_yr6_confidence_int_95, real_yr7_confidence_int_95, real_yr8_confidence_int_95]
# real_97_5_percent_confidence = [real_yr1_confidence_int_97_5, real_yr2_confidence_int_97_5, real_yr3_confidence_int_97_5, real_yr4_confidence_int_97_5, real_yr5_confidence_int_97_5, real_yr6_confidence_int_97_5, real_yr7_confidence_int_97_5, real_yr8_confidence_int_97_5]
# real_d = {'post year':[1,2,3,4,5,6,7,8], 
#               'means no outliers':real_means_no_outliers, 
#               'means with outliers': real_means_yes_outliers, 
#               '90 percent confidence interval': real_90percent_confidence, 
#               '95 percent confidence interval': real_95percent_confidence, 
#               '97.5 percent confidence interval': real_97_5_percent_confidence}
# real_df = pd.DataFrame(real_d)
# real_df.to_csv(path_or_buf='/content/drive/MyDrive/IDeA Lab/Burned Catchment Hydrology/runoff_ratio_analysis/rra_catch-level_empDist_real_table.csv',index=False)
